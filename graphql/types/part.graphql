type Part {
    id: Int
    partId: String
    date: String
    address: String
    reason: String
    type: ServiceType
    finished: Boolean
    notFinishedReason: String
    employeeId: Int
    customerId: Int
    employee: Employee
    customer: Customer
    creationDate: String
    active: Boolean
}

type ServiceType {
    mounting: Boolean
    maintenance: Boolean
    repair: Boolean
    others: Boolean
}

input ServiceTypeInput {
    mounting: Boolean!
    maintenance: Boolean!
    repair: Boolean!
    others: Boolean!
}

input PartInput {
    partId: String!
    date: String!
    address: String!
    reason: String!
    type: ServiceTypeInput!
    finished: Boolean
    notFinishedReason: String
    employeeId: Int!
    customerId: Int!
}

input PartInputUpdate {
    id: Int!
    partId: String!
    date: String!
    address: String!
    reason: String!
    type: ServiceTypeInput!
    finished: Boolean
    notFinishedReason: String
    employeeId: Int!
    customerId: Int!
}

type FilteredParts {
    rows: [Part]
    count: Int
}

# The "Query" type is the root of all GraphQL queries.
# (A "Mutation" type will be covered later on.)
type Query {
    part(partId: String!, customerId: Int): Part
    parts(filters: [Filter]!, options: Options!): FilteredParts
}

type Mutation {
    addPart(part: PartInput!): Part
    updatePart(part: PartInputUpdate!): Part
}

type Subscription {
    partAdded: Part
    partUpdated: Part
}